# shebang
# encoding

"""
Python script for Raspberry Pi with Camera

Start/Stop video recording via GPIO on pin header P1 (2x13)
Using GPIO 24 and 25 with internal pull-up resistors next to ground and detecting a falling edge.
Calling the camera apps.
Tested with Raspbian 2013/5


Links
http://www.raspberrypi.org/
http://elinux.org/Rpi_Camera_Module
http://elinux.org/Rpi_Low-level_peripherals#Python
http://code.google.com/p/raspberry-gpio-python/wiki/Inputs

P1 Pinout (incomplete, no warranty, check board revision)
        ----------+   <--- Raspberry Pi board corner
                  |
    3V3  1    2 5V
         3    4 5V
         5    6 GND
GPIO_4   7    8 GPIO_14 (TXD)
    GND  9   10 GPIO_15 (RXD)
GPIO_17 11   12 GPIO_18 (PCM_CLK)
        13   14 GND
GPIO_22 15   16 GPIO_23
    3V3 17   18 GPIO_24
GPIO_10 19   20 GND
GPIO_9  21   22 GPIO_25
GPIO_11 23   24 GPIO_8 (CE0)
    GND 25   26 GPIO_7 (CE1)

"""


print('start of script...')

import os
import sys
import time
import datetime
import subprocess


import RPi.GPIO as GPIO

print( "GPIO.RPI_REVISION: ", GPIO.RPI_REVISION)
print( "GPIO.VERSION: ", GPIO.VERSION)



def timestamp():
  """
  Return current date/time as string.
  """
  return( datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S-%f") )


def snap(channel):
  """
  Take a single picture and save to disk.
  Used as callback in GPIO event.
  """
  print("snap ({}) ..".format(channel))
  subprocess.call( ["raspistill --nopreview --timeout 100 --quality 85 --output {}.jpg".format(timestamp())], shell=True )


vid_toggle = False

def vid(c):
  """
  Start recording video until stopped.
  Used as callback in GPIO event.
  """
  if vid_toggle:
    vid_toggle = False
    print("snap..")
    subprocess.call( ["raspivid --nopreview --output {}.h264".format(timestamp())], shell=True )
  else:
    vid_toggle = True
    # http://www.raspberrypi.org/phpBB3/viewtopic.php?f=32&t=44672&p=355140
    subprocess.call( ["pkill raspivid"], shell=True )
  
  

GPIO.setmode(GPIO.BCM)

button = 24
GPIO.setup(button, GPIO.IN, pull_up_down=GPIO.PUD_UP)


stop = 25
#GPIO.setup(led, GPIO.OUT)
GPIO.setup(stop, GPIO.IN, pull_up_down=GPIO.PUD_UP)



  
'''
button_last = GPIO.input(button)
while True:  
  button_now = GPIO.input(button)
  if button_now != button_last and button_now == GPIO.LOW:
    snap()
  button_last = button_now
  time.sleep(0.01)
'''

'''
while True: 
  GPIO.wait_for_edge(button, GPIO.RISING)
  snap()
'''


GPIO.add_event_detect(button, GPIO.FALLING, callback=snap, bouncetime=300)
GPIO.add_event_detect(stop, GPIO.FALLING, bouncetime=300)

while True:
  try:
    time.sleep(1.0)
  except KeyboardInterrupt:
    print("except..")
    break
  
  if GPIO.event_detected(stop):
    print('stopping')
    break

    
GPIO.remove_event_detect(button)
GPIO.remove_event_detect(stop)

GPIO.cleanup()

print('end of script.')