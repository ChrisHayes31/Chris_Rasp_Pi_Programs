[{"id":"eff90b58.673dc8","type":"inject","z":"10318c53.33bd34","name":"","topic":"","payload":"KEY-HDMI","payloadType":"str","repeat":"","crontab":"","once":false,"x":140,"y":80,"wires":[["36b9337e.6f41ac"]]},{"id":"ad1ce8a7.318658","type":"base64","z":"10318c53.33bd34","name":"","x":460,"y":80,"wires":[["d6b754a3.f0d698","d2b795f7.8a90d8"]]},{"id":"d6b754a3.f0d698","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"payload","x":658.5,"y":80,"wires":[]},{"id":"e214268e.e7a328","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":658.5,"y":160,"wires":[]},{"id":"d2b795f7.8a90d8","type":"base64","z":"10318c53.33bd34","name":"","x":460,"y":160,"wires":[["e214268e.e7a328"]]},{"id":"36b9337e.6f41ac","type":"function","z":"10318c53.33bd34","name":"","func":"msg.payload = new Buffer.from(\"KEY-HDMI\");\n\nreturn msg;","outputs":1,"noerr":0,"x":298.5,"y":80,"wires":[["ad1ce8a7.318658"]]},{"id":"82a6f8c0.3df158","type":"function","z":"10318c53.33bd34","name":"Test_Code","func":"//var net = require('net');\n\n//var exec = require('child_process').exec;\n\nvar chr = String.fromCharCode,\n    base64Encode = function(string) \n        {\n        return new Buffer(string).toString('base64');\n        };\n\nvar Remote = function(config) {\n\n    if (!config.ip) throw new Error(\"TV IP address is required\");\n\n    config.host = config.host || {\n        ip: \"192.168.1.62\",\n        mac: \"'b8:27:eb:67:dd:23\",\n        name: \"NodeJS Samsung Remote\"\n        //var app_name = 'python'; // app name python\n        //var remote_name = 'python remote'; // remote name python remote\n        \n        \n        \n    };\n\n    config.appString = config.appString || \"python..iapp.samsung\";\n    //config.appString = config.appString || \"iphone..iapp.samsung\";\n    config.tvAppString = config.tvAppString || \"python.UA55C7000.iapp.samsung\";\n    //config.tvAppString = config.tvAppString || \"iphone.UA55C7000.iapp.samsung\";\n    //config.tvAppString = config.tvAppString || \"iphone.UN60D6000.iapp.samsung\";\n    //var TV_Model = 'UA55C7000'; // tv type model UA55C7000\n    config.port = config.port || 55000;\n    config.timeout = config.timeout || 5000;\n\n    var _socketChunkOne = function () {\n            var ipEncoded = base64Encode(config.host.ip),\n                macEncoded = base64Encode(config.host.mac);\n\n            var message = chr(0x64) +\n                chr(0x00) +\n                chr(ipEncoded.length) +\n                chr(0x00) +\n                ipEncoded +\n                chr(macEncoded.length) +\n                chr(0x00) +\n                macEncoded +\n                chr(base64Encode(config.host.name).length) +\n                chr(0x00) +\n                base64Encode(config.host.name);\n\n            return chr(0x00) +\n                chr(config.appString.length) +\n                chr(0x00) +\n                config.appString +\n                chr(message.length) +\n                chr(0x00) +\n                message;\n        },\n        _socketChunkTwo = function(command) {\n            var message = chr(0x00) +\n                chr(0x00) +\n                chr(0x00) +\n                chr(base64Encode(command).length) +\n                chr(0x00) +\n                base64Encode(command);\n\n            return chr(0x00) +\n                chr(config.tvAppString.length) +\n                chr(0x00) +\n                config.tvAppString +\n                chr(message.length) +\n                chr(0x00) +\n                message;\n        };\n\n    this.send = function(command, done) {\n        if (!command) throw new Error ('Missing command');\n\n        var socket = net.connect(config.port, config.ip);\n\n        socket.setTimeout(config.timeout);\n\n        socket.on('connect', function() {\n            socket.write(_socketChunkOne());\n            socket.write(_socketChunkTwo(command));\n            socket.end();\n            socket.destroy();\n            done(false);\n        });\n\n        socket.on('close', function () {\n            //console.log('Samsung Remote Client: disconnected from ' + config.ip + ':' + config.port);\n        });\n\n        socket.on('error', function(error) {\n            var errorMsg;\n\n            if (error.code === 'EHOSTUNREACH' || error.code === 'ECONNREFUSED') {\n                errorMsg = 'Samsung Remote Client: Device is off or unreachable';\n            } else {\n                errorMsg = 'Samsung Remote Client: ' + error.code;\n            }\n\n            done(errorMsg);\n        });\n\n        socket.on('timeout', function() {\n            done(\"Timeout\");\n        });\n    };\n\n    this.isAlive = function(done) {\n        return exec(\"ping -c 1 \" + config.ip, function (error, stdout, stderr) {\n            if (error) {\n                done(1);\n            } else {\n                done(0);\n            }\n        });\n    };\n\n    this.config = config;\n};\n\n//module.exports = Remote;","outputs":1,"noerr":0,"x":250,"y":320,"wires":[["eaa9d965.182ed8"]]},{"id":"e94612c4.5f77f","type":"csv","z":"10318c53.33bd34","name":"","sep":",","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","x":230,"y":120,"wires":[[]]},{"id":"9bc1201c.e4278","type":"inject","z":"10318c53.33bd34","name":"","topic":"","payload":"KEY-HDMI","payloadType":"str","repeat":"","crontab":"","once":false,"x":180,"y":480,"wires":[["f99caf2a.afad2"]]},{"id":"eaa9d965.182ed8","type":"base64","z":"10318c53.33bd34","name":"","x":425.5,"y":321,"wires":[["73fcee3f.70387","7e79e8ff.b4b388"]]},{"id":"73fcee3f.70387","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":624,"y":321,"wires":[]},{"id":"72eae033.2d601","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":624,"y":401,"wires":[]},{"id":"7e79e8ff.b4b388","type":"base64","z":"10318c53.33bd34","name":"","x":425.5,"y":401,"wires":[["72eae033.2d601"]]},{"id":"ec07e048.b97b7","type":"function","z":"10318c53.33bd34","name":"","func":"var data_to_send = msg.payload;\n//msg.payload = new Buffer.from(\"KEY_HDMI\");\ndata_to_send = new Buffer.from(data_to_send.payload);\n//var data_to_send = msg.payload;\nvar chr = String.fromCharCode, base64Encode = function(string) \n    {\n    return new Buffer(string).toString('base64');\n    };\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":200,"wires":[[]]},{"id":"f99caf2a.afad2","type":"function","z":"10318c53.33bd34","name":"Create_Packet","func":"var command       = msg.payload;\nvar tv_ip         = \"192.168.1.62\";\nvar pi_mac        = \"b8:27:eb:67:dd:23\";\nvar app_name      = \"NodeJS Samsung Remote\";\nvar appString     = \"python..iapp.samsung\";\nvar tvAppString   = \"python.UA55C7000.iapp.samsung\";\nvar app_port      = 55000;\nvar tv_ipEncoded  = base64Encode(tv_ip);\nvar pi_macEncoded = base64Encode(pi_mac);\n\nfunction base64Encode(t_temp) \n    {\n    return new Buffer(t_temp).toString('base64');\n    }\n\n//var chr = String.fromCharCode, base64Encode = function(string) \n//        {\n//        return new Buffer(string).toString('base64');\n//        };\n\n\nvar b_pakcet1 = (chr(0x64) +\n                chr(0x00) +\n                chr(tv_ipEncoded.length) +\n                chr(0x00) +\n                ipEncoded +\n                chr(pi_macEncoded.length) +\n                chr(0x00) +\n                macEncoded +\n                chr(base64Encode(app_name).length) +\n                chr(0x00) +\n                base64Encode(app_name) + //;\n                //return \n                chr(0x00) +\n                chr(appString.length) +\n                chr(0x00) +\n                config.appString +\n                chr(message.length) +\n                chr(0x00));\n                //+\n                //message;\n\n        \nvar b_pakcet2 = (chr(0x00) +\n                chr(0x00) +\n                chr(0x00) +\n                chr(base64Encode(command).length) +\n                chr(0x00) +\n                base64Encode(command) + //;\n                //return \n                chr(0x00) +\n                chr(config.tvAppString.length) +\n                chr(0x00) +\n                config.tvAppString +\n                chr(message.length) +\n                chr(0x00));\n                //+\n                //message;\n        \n\nreturn b_packet1,b_packet2;","outputs":1,"noerr":0,"x":490,"y":480,"wires":[["283399d2.3a5736"]]},{"id":"283399d2.3a5736","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":760,"y":480,"wires":[]},{"id":"bca96919.97e678","type":"function","z":"10318c53.33bd34","name":"BASE64 Test","func":"module.exports = function(RED) {\n    \"use strict\";\n\n    function Base64Node(n) {\n        RED.nodes.createNode(this,n);\n        var node = this;\n        this.on(\"input\", function(msg) {\n            if (msg.hasOwnProperty(\"payload\")) {\n                if (Buffer.isBuffer(msg.payload)) {\n                    // Take binary buffer and make into a base64 string\n                    msg.payload = msg.payload.toString('base64');\n                    node.send(msg);\n                }\n                else if (typeof msg.payload === \"string\") {\n                    // Take base64 string and make into binary buffer\n                    var regexp = new RegExp('^[A-Za-z0-9+\\/=]*$');\n                    if ( regexp.test(msg.payload) && (msg.payload.length % 4 === 0) ) {\n                        msg.payload = new Buffer(msg.payload,'base64');\n                        node.send(msg);\n                    }\n                    else {\n                        //node.log(\"Not a Base64 string - maybe we should encode it...\");\n                        msg.payload = (new Buffer(msg.payload,\"binary\")).toString('base64');\n                        node.send(msg);\n                    }\n                }\n                else {\n                    node.warn(\"This node only handles strings or buffers.\");\n                }\n            }\n            else { node.warn(\"No payload found to process\"); }\n        });\n    }\n    RED.nodes.registerType(\"base64\",Base64Node);\n}","outputs":1,"noerr":0,"x":480,"y":560,"wires":[["c89f1a72.49fef8"]]},{"id":"c89f1a72.49fef8","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":680,"y":560,"wires":[]},{"id":"6dda0545.946f2c","type":"inject","z":"10318c53.33bd34","name":"","topic":"","payload":"KEY-HDMI1","payloadType":"str","repeat":"","crontab":"","once":false,"x":190,"y":580,"wires":[["bca96919.97e678"]]},{"id":"fa74ad99.e87b7","type":"debug","z":"10318c53.33bd34","name":"","active":false,"console":"false","complete":"false","x":570,"y":660,"wires":[]},{"id":"c762f01.8c60e1","type":"inject","z":"10318c53.33bd34","name":"Key AV1","topic":"","payload":"KEY-AV1","payloadType":"str","repeat":"","crontab":"","once":false,"x":160,"y":660,"wires":[["3ca265db.74de3a"]]},{"id":"3ca265db.74de3a","type":"function","z":"10318c53.33bd34","name":"Convert to Base64","func":"msg.payload = msg.payload;\nvar s_temp = msg.payload;\nvar tv_ip         = \"192.168.1.62\";\nvar pi_mac        = \"b8:27:eb:67:dd:23\";\nvar app_name      = \"NodeJS Samsung Remote\";\nvar appString     = \"python..iapp.samsung\";\nvar tvAppString   = \"python.UA55C7000.iapp.samsung\";\nvar app_port      = 55000;\nvar tv_ip_encoded;\nvar pi_mac_encoded;\n//var message_encoded;\nvar t_temp;\nvar d;\nvar s;\n//var arrayLength = myStringArray.length;\n//msg.payload = new Buffer.from(\"KEY-HDMI\");\n\nfunction base64Encode(t_temp) \n    {\n    if (typeof Buffer.from === \"function\") \n    {\n    // Node 5.10+\n    return Buffer.from(t_temp, 'base64'); // Ta-da\n    } \n    else \n        {\n        // older Node versions\n        return new Buffer(t_temp, 'base64'); // Ta-da\n        }\n    //return new Buffer(t_temp).toString('base64','utf8');\n    }\n//console.log(Buffer.from(\"Hello World\").toString('base64'));\n\n//var message_encoded = Buffer.from(s_temp, 'base64');\n//var buf = Buffer.from(b64string, 'base64');\n\n//g.payload = new Buffer(msg.payload.toString('base64'));\nmessage_encoded = msg.base64;\nmsg.payload = msg.base64;\n       //tv_ip_encoded = base64Encode(tv_ip);\n       //pi_mac_encoded = base64Encode(pi_mac);\n//var b = new Buffer('KEY-HDMI');\n//node.send(msg);\n\n//node.send(message_encoded);\n//node.send(pi_mac_encoded);\n//node.send(tv_ip_encoded);\nreturn msg;","outputs":1,"noerr":0,"x":370,"y":660,"wires":[["fa74ad99.e87b7"]]},{"id":"96faf747.f9b508","type":"inject","z":"10318c53.33bd34","name":"Key HDMI","topic":"","payload":"KEY-HDMI","payloadType":"str","repeat":"","crontab":"","once":false,"x":160,"y":720,"wires":[["3ca265db.74de3a"]]}]