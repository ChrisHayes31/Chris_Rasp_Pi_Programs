[{"id":"b4b9822c.d1ab1","type":"function","z":"72c6d31d.250bcc","name":"Base64 Encoder","func":"var newMsg = msg.payload;\n\nfunction base64Encode(t_temp) \n    {\n    return new Buffer(t_temp).toString('base64');\n    }\nvar tv_ip            = \"192.168.1.62\"; // tv ip address\nvar pi_ip            = \"192.168.1.107\"; // pi ip address\nvar pi_mac           = \"b8:27:eb:67:dd:23\"; // pi mac address\nvar app_name         = \"python remote\"; // remote name\nvar app_string        = \"python\"; // app string\nvar tv_model         = \"UA55C7000\"; // tv model type\nvar app_port         = 55000; // port to use\nvar tv_ip_encoded    = base64Encode(tv_ip);\nvar pi_mac_encoded   = base64Encode(pi_mac);\nvar newMsg_encoded   = base64Encode(newMsg);\nvar app_name_encoded = base64Encode(app_name);\nvar tv_model_encoded = base64Encode(tv_model);\n\n//var encoded = new Buffer(tester).toString('base64');\n\n// message packet\nvar msg1      = ((0x64) + (0x00) +\n                tv_ip_encoded.length + (0x00) + \n                tv_ip_encoded + (0x00) +\n                pi_mac_encoded.length + (0x00) + \n                pi_mac_encoded + (0x00) +\n                app_name_encoded.length + (0x00) + \n                app_name_encoded);\n\nvar pkt1      = ((0x00) + app_string.length + (0x00) +\n                app_string + (0x00) + \n                msg1.length + (0x00) +\n                msg1);\nnode.send ({payload: pkt1});\n\nvar msg2      = ((0x00) + (0x00) + (0x00) + \n                newMsg_encoded.length + (0x00) +\n                newMsg_encoded);\nvar pkt2      = ((0x00) + \n                tv_model.length + (0x00) +\n                tv_model + \n                msg2.length + (0x00) +\n                msg2);\nnode.send ({payload: pkt2});\n\n/*\n var a_packet1 =    (0x64) + (0x00) +\\\n                    (tv_ipbase64.b64encode(src).decode(encoding))) +\\\n           chr(0x00) + base64.b64encode(src).decode(encoding) +\\\n           chr(len(base64.b64encode(mac).decode(encoding))) +\\\n           chr(0x00) + base64.b64encode(mac).decode(encoding) +\\\n           chr(len(base64.b64encode(remote).decode(encoding))) +\\\n           chr(0x00) + base64.b64encode(remote).decode(encoding)\n*/\n\n\n/*\n   var message = chr(0x64) + chr(0x00) + chr(ipEncoded.length) +\n                chr(0x00) + ipEncoded + chr(macEncoded.length) +\n                chr(0x00) + macEncoded + chr(base64Encode(config.host.name).length) +\n                chr(0x00) + base64Encode(config.host.name);\n\n            return chr(0x00) +\n                chr(config.appString.length) +\n                chr(0x00) +\n                config.appString +\n                chr(message.length) +\n                chr(0x00) +\n                message;\n*/\n\n\n\n\n/*      \nvar b_pakcet2 = (chr(0x00) +\n                chr(0x00) +\n                chr(0x00) +\n                chr(base64Encode(command).length) +\n                chr(0x00) +\n                base64Encode(command) + //;\n                //return \n                chr(0x00) +\n                chr(config.tvAppString.length) +\n                chr(0x00) +\n                config.tvAppString +\n                chr(newMsg.length) +\n                chr(0x00));\n                //+\n                //message;\n\n*/\n\n\n//node.send ({payload: encoded});\n//node.send ({payload: b_pakcet1})\n//node.send ({payload: c_pakcet1})\n//retrun [null,null];","outputs":1,"noerr":0,"x":380,"y":160,"wires":[[]]}]