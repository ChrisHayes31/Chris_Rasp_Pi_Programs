[{"id":"8373a12.af7516","type":"function","z":"3d45e3fb.13b93c","name":"extract temps","func":"var array_length = { payload: msg.payload.length };\nvar s_data = [];\n\nfor (var i = 0; i < array_length; i++)\n    {\n    s_data.push(msg[i].val);\n    return [s_data];\n            \n    //var s_data = msg.payload['ROM'];        \n    //var t_data = msg.payload.split(',');\n    //var temp_dta = parse(t_data[1]);\n    //var maca_dta = parse(t_data[0]);\n    //return [maca_dta],[temp_dta];\n    }\n\nreturn [null];\n//return [s_data];","outputs":"1","noerr":0,"x":720,"y":100,"wires":[["7a1b7590.92c1ec"]]},{"id":"7a1b7590.92c1ec","type":"debug","z":"3d45e3fb.13b93c","name":"","active":false,"console":"false","complete":"false","x":910,"y":100,"wires":[]},{"id":"592fb047.b3043","type":"inject","z":"3d45e3fb.13b93c","name":"","topic":"","payload":"2345678,23.45","payloadType":"str","repeat":"","crontab":"","once":false,"x":520,"y":100,"wires":[["8373a12.af7516"]]},{"id":"f7cc4c6d.63fd8","type":"inject","z":"3d45e3fb.13b93c","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"*/5 0-23 * * *","once":false,"x":290,"y":180,"wires":[["ab56301a.c748c"]]},{"id":"ab56301a.c748c","type":"http request","z":"3d45e3fb.13b93c","name":"","method":"GET","ret":"txt","url":"http://192.168.1.125","tls":"","x":450,"y":180,"wires":[["82f887d3.ecb188","bc572a3d.825448"]]},{"id":"82f887d3.ecb188","type":"csv","z":"3d45e3fb.13b93c","name":"","sep":",","hdrin":true,"hdrout":false,"multi":"mult","ret":"\\n","temp":"","x":610,"y":180,"wires":[["9eb4b746.79a488","b4531c0b.374ef"]]},{"id":"bc572a3d.825448","type":"debug","z":"3d45e3fb.13b93c","name":"http:request_Message","active":false,"console":"false","complete":"payload","x":500,"y":340,"wires":[]},{"id":"9eb4b746.79a488","type":"debug","z":"3d45e3fb.13b93c","name":"","active":false,"console":"false","complete":"payload","x":1050,"y":180,"wires":[]},{"id":"a9988984.3d9928","type":"function","z":"3d45e3fb.13b93c","name":"function 1","func":"var array_length = { payload: msg.payload.length };\nvar raw_text = { payload: msg.payload };\nvar t_temp = 'Temperature';\nvar t_ROM  = 'ROM';\n//var s_data = [];\n\nvar s_data1 = msg //{payload:\"test1\"};\n\nvar s_data2 = {payload:msg.payload};\nvar s_data3 = {payload:\"test3\"};\nvar s_data4 = msg.payload.split(\",\");\n\n\nfor (var i = 0; i < array_length; i++)\n    {\n    //return [s_data1, s_data2, s_data3, s_data4];\n    }\n    //var temp_dta = parse(t_data[1]);\n    //s_data.push(msg.val);\n    //return i;\n            \n   //var s_data = msg.payload['ROM'];        \n   //var t_data = msg.payload.split(',');\n    //var temp_dta = parse(t_data[1]);\n    //var maca_dta = parse(t_data[0]);\n    //return [maca_dta],[temp_dta];\n    \n\n//return msg;\nreturn s_data4;\n\n\n//get the size of the array\n//for each item in the array loop through\n//using the field names in each item\n//pass each item into influxdb\n//then stop\n//var newMsg = { payload: msg.payload.length };\n//return newMsg;","outputs":1,"noerr":0,"x":1180,"y":460,"wires":[[]]},{"id":"86cbbcf3.73439","type":"debug","z":"3d45e3fb.13b93c","name":"Extract_Message","active":false,"console":"false","complete":"payload","x":1230,"y":240,"wires":[]},{"id":"3aba0d43.82ff72","type":"function","z":"3d45e3fb.13b93c","name":"Extract_Temps","func":"var myDataArray = msg.payload;\nvar arrayLength = myDataArray.length;\nvar t_data = [];\n/*\nfor (var i = 0; i < arrayLength; i++) \n    {\n    //msg.payload = (myDataArray[i]);\n    //t_data[i] = (myDataArray[i]);\n    //t_data[i+1] = (myDataArray[i]);\n    msg.payload = msg.payload[0][0].last;\n    return msg;\n    //return t_data[i];\n    //return msg;\n    }\n*/\n//msg.payload = msg.payload.[0].[0].last;\n//msg.payload = msg.payload[0][0].last;\nreturn msg;\n    ","outputs":1,"noerr":0,"x":370,"y":560,"wires":[[]]},{"id":"b4531c0b.374ef","type":"function","z":"3d45e3fb.13b93c","name":"Extract_Test","func":"var myStringArray = msg.payload; // load the array with the incoming messgae\nvar arrayLength = myStringArray.length; // how many are in the array\nvar ext_msg;\nvar invalid_Data = false;\nfor (var i = 0; i < arrayLength; i++) // create a loop to test the following\n    {\n    if (myStringArray[i].Temperature === -127) // trap error in data\n        {\n        invalid_Data = true;\n        }\n    else if (myStringArray[i].Temperature === '00.00') // trap 00.00 error in data\n        {\n        invalid_Data = true;\n        }\n        \n   if (invalid_Data === false)\n        {\n        ext_msg = [ // setup the message for the transmission to Influxdb\n            {\n            measurement: \"local-temperatures-test1\",\n            fields: { Temperature: (myStringArray[i].Temperature) }, // trans-scribe from the array Temperature data\n            tags:{ ROM: (myStringArray[i].ROM) }, // trans-scribe from the array ROM data\n            timestamp: new Date()\n            }];\n        node.send({payload:ext_msg}); // send each element message\n        }\n    else\n        {\n        node.send({payload:null}); // send null if data corrupt\n        }\n    }\nreturn null;","outputs":1,"noerr":0,"x":1030,"y":240,"wires":[["86cbbcf3.73439"]]},{"id":"72129ffb.17ca3","type":"function","z":"3d45e3fb.13b93c","name":"Seperated_TEMPS and ROM_Data","func":"var parts;\nvar ext_msg;\nvar msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nmsg.string = msg.payload; //.split(\" \");\nmsg1.payload=msg.string[1]; // ROM Feild name\nmsg2.payload=msg.string[2]; // ROM value\nmsg3.payload=msg.string[3]; // Temperature field name\nmsg4.payload=msg.string[4]; // Temperature value\n\next_msg = [\n    {\n    measurement: \"local-temperatures-test1\",\n    fields: { Temperature: msg4 },\n    //fields: { Temperature: 21.00 },\n    tags:{ ROM: msg2 },\n    //tags:{ ROM:\"280c035a050000db\" },\n    timestamp: new Date()\n    }];\n\nnode.send({payload:ext_msg});\n//node.send {l_len};\n    //node.send({payload:result});\n\n/*\nvar myStringArray = msg.payload;\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i < arrayLength; i++) \n    {\n    var result = (myStringArray[i]);\n    node.send({payload:result});\n    }\nreturn null;\n*/\n/*\nvar msg1;\nvar msg2;\nvar msg3;\n\nmsg1 = [\n    {\n    measurement: \"local-temperatures-test1\",\n    fields: { Temperature: 21.00 },\n    tags:{ ROM:\"280c035a050000db\" },\n    timestamp: new Date()\n    }];\nnode.send({payload:msg1});\n\nmsg2 = [   \n    {\n    measurement: \"local-temperatures-test1\",\n    fields: { Temperature: 22.00 },\n    tags:{ ROM:\"28fc485a05000030\" },\n    timestamp: new Date() \n    }];\nnode.send({payload:msg2});\n\nmsg3 = [   \n    {\n    measurement: \"local-temperatures-test1\",\n    fields: { Temperature: 23.00 },\n    tags:{ ROM:\"28fd555a05000097\" },\n    timestamp: new Date()\n    }];\nnode.send({payload:msg3});\n*/\nreturn null;","outputs":1,"noerr":0,"x":730,"y":520,"wires":[["4738decf.e42b7"]]},{"id":"4738decf.e42b7","type":"debug","z":"3d45e3fb.13b93c","name":"Seperated_TEMPS","active":false,"console":"false","complete":"payload","x":920,"y":480,"wires":[]},{"id":"228dae1d.b08f12","type":"function","z":"3d45e3fb.13b93c","name":"Copied extratcted","func":"var ext_msg;\nvar msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar msg5 = {};\nvar myStringArray = msg.payload;\nvar arrayLength = myStringArray.length;\n//msg5.string = msg.payload.split(\" \");\nmsg2.payload = parseInt(result[2]); // ROM value position 2\nmsg4.payload = parseInt(result[4]); // Temperature value position 4\n/*\nfor (var i = 0; i < arrayLength; i++) \n    {\n    var result = (myStringArray[i]);\n    \n    //msg1.payload = parse(result); // ROM Feild name\n    //msg1.payload=myStringArray[i].string[1]; // ROM Feild name\n    msg2.payload = parseInt(result[2]); // ROM value position 2\n    //msg3.payload=myStringArray[i].string[3]; // Temperature field name\n    //msg4.payload=myStringArray[i].string[4]; // Temperature value\n    msg4.payload = parseInt(result[4]); // Temperature value position 4\n*/\next_msg = [\n    {\n    measurement: \"local-temperatures-test1\",\n    fields: { Temperature: msg4 },\n    //fields: { Temperature: 21.00 },\n    tags:{ ROM: msg2 },\n    //tags:{ ROM:\"280c035a050000db\" },\n    timestamp: new Date()\n    }];\n\nnode.send({payload:ext_msg});\n    //node.send({payload:result});\n    \nreturn null;","outputs":1,"noerr":0,"x":390,"y":440,"wires":[[]]},{"id":"40ca0649.40ef98","type":"debug","z":"3d45e3fb.13b93c","name":"monitor the data stream","active":false,"console":"false","complete":"payload","x":1240,"y":300,"wires":[]},{"id":"98def2cd.dfb0b","type":"function","z":"3d45e3fb.13b93c","name":"","func":"var newPayload = [];\n//var validData = false;\nvar myStringArray = msg.payload; // load the array with the incoming messgae\nvar arrayLength = myStringArray.length; // how many are in the array\nfor (var i = 0; i < arrayLength; i++) // create a loop to test the following\n    {\n    if (myStringArray[i].Temperature > 0)\n        {\n        ext_msg = [ // setup the message for the transmission to Influxdb\n            {\n            measurement: \"local-temperatures-test1\",\n            fields: { Temperature: (myStringArray[i].Temperature) }, // trans-scribe from the array Temperature data \n            tags:{ ROM: (myStringArray[i].ROM) }, // trans-scribe from the array ROM data\n            timestamp: new Date()\n            }];\n        node.send({payload:ext_msg}); // send each element message\n        }\n    }\n\n/*\nvar msg12 = msg.payload.map(function (p) \n    {\n    return {payload: p};\n    });\n*/\nreturn msg12;","outputs":1,"noerr":0,"x":960,"y":380,"wires":[["71b3610a.afe04"]]},{"id":"71b3610a.afe04","type":"debug","z":"3d45e3fb.13b93c","name":"","active":false,"console":"false","complete":"false","x":1120,"y":380,"wires":[]},{"id":"af4dcdca.c938b","type":"function","z":"3d45e3fb.13b93c","name":"Extract_Test","func":"var myStringArray = msg.payload; // load the array with the incoming messgae\nvar arrayLength = myStringArray.length; // how many are in the array\nvar ext_msg;\nfor (var i = 0; i < arrayLength; i++) // create a loop to test the following\n    {\n    ext_msg = [ // setup the message for the transmission to Influxdb\n        {\n        measurement: \"local-temperatures-test1\",\n        fields: { Temperature: (myStringArray[i].Temperature) }, // trans-scribe from the array Temperature data \n        tags:{ ROM: (myStringArray[i].ROM) }, // trans-scribe from the array ROM data\n        timestamp: new Date()\n        }];\n    node.send({payload:ext_msg}); // send each element message\n    }\nreturn null;","outputs":1,"noerr":0,"x":1170,"y":80,"wires":[[]]}]